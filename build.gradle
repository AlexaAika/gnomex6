apply plugin: 'war'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'maven'
apply from: 'common.gradle'
ant.importBuild 'flexBuild.xml'
import org.apache.tools.ant.filters.*;

repositories {
    mavenLocal()
    //mavenCentral()
    jcenter()
}

dependencies {
    compile fileTree (dir: 'libEnv', include: 'hci-hibernate5-utils-1.0.jar');
    compile fileTree (dir: 'lib', include: 'biojava.jar')
    compile fileTree (dir: 'lib', include: 'metrixClient-1.4.jar')
    compile fileTree (dir: 'libEnv', include: 'hci_framework.jar')
    compile fileTree (dir: 'libEnv', include: 'hci_utils.jar')
    compile fileTree (dir: 'libEnv', include: 'HCIReport.jar')
    //have to use extremely old jdom b/c the hci framework is using a very old jdom
    compile fileTree (dir: 'libEnv', include: 'jdom.jar')

    //Realm stuff
    //why do these have to be providedCompile.  Compile breaks tomcat startup
    //difference between providedCompile and Compile??
    providedCompile 'org.apache.tomcat:tomcat-jdbc:9.0.0.M10'
    providedCompile 'org.apache.tomcat:tomcat-catalina:7.0.68'
    providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.1'
    providedCompile 'log4j:log4j:1.2.12'
    providedCompile 'javax.mail:mail:1.4.7'

    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.2.2.Final'
    compile group: 'servlets.com', name: 'cos', version: '05Nov2002'
    compile group: 'org.apache.commons', name: 'commons-compress', version: '1.1'
    compile group: 'org.ostermiller', name: 'utils', version: '1.07.00'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.5'
    compile group: 'commons-validator', name: 'commons-validator', version: '1.4.0'
    compile group: 'commons-io', name: 'commons-io', version: '2.4'
    compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
    compile group: 'net.sf.json-lib', name: 'json-lib', version: '2.4', classifier: 'jdk15'
    compile group: 'org.apache.lucene', name: 'lucene-core', version: '2.9.4'
    compile group: 'com.itextpdf', name: 'itextpdf', version: '5.5.9'
    compile group: 'javax.ejb', name: 'javax.ejb-api', version: '3.2'
    compile group: 'org.freemarker', name: 'freemarker', version: '2.3.20'
}

//formattedDate has date format
task gnomex_init << {
    new File(glSaveDir).mkdirs()        // ./glsave
    new File(glSaveDirSecure).mkdirs()  // ./glsave/secure
}

/**
 * useful for developers.  Clear out the old gnomex.war and gnomex.realm and unpacked gnomex folder if it exists
 */
task clean_tomcat << {
    delete "${serverHome}/webapps/gnomex.war"
    delete "${serverHome}/lib/gnomex_realm.jar"
    delete "${serverHome}/webapps/gnomex"
    delete "${serverHome}/webapps/gnomexlite.war"
    delete "${serverHome}/webapps/gnomexLite"
}

/**
 * build gnomex for localhost and production instances
 */
task gnomex_all {
    dependsOn gnomex_init, clean, 'jar', 'clientJar', 'realmJar', 'flex-compile', 'copyScripts', 'war', 'gnomex_deploy'

    // run gnomex_deploy after this
}

/**
 * build opensource gnomex instances
 */
task gnomex_all_opensource {
    dependsOn gnomex_init, clean, 'disableHTTPS', 'jar', 'clientJar', 'realmJar', 'flex-compile', 'copyScripts',
            'opensourceWar', 'enableHTTPS', 'gnomex_deploy'

      //run gnomex_deploy after this
}

task gnomex_lite_all {
    dependsOn gnomex_init, clean, 'jar', 'clientJar', 'realmJar', 'copyScripts', 'gnomexLiteWar', 'gnomex_deploy'
}

// not working
// TODO: need to make a secure gnomex.war for opensource users for the zip distribution
//task gnomex_secure_opensource {
//    dependsOn 'changeWarName', 'opensourceWar'
//}

//task changeWarName << {
//    project.ext {
//        warName = "gnomex_secure.war";
//    }
//}

//run createOpenSourceZip if you want to create a zip for opensource users to download.

task disableHTTPS << {
    replaceString("${baseDir}/src/main/java/hci/gnomex/constants/Constants.java",
            "REQUIRE_SECURE_REMOTE = true;",
            "REQUIRE_SECURE_REMOTE = false;")
}

task enableHTTPS << {
    replaceString("${baseDir}/src/main/java/hci/gnomex/constants/Constants.java",
            "REQUIRE_SECURE_REMOTE = false;",
            "REQUIRE_SECURE_REMOTE = true;")
}

// replace string  helper function
def replaceString(fileName, fromString, toString) {
    def file = new File(fileName)
    def fileText = file.text
    fileText = fileText.replace(fromString, toString);
    new File(fileName).write(fileText)
}


jar {
    archiveName = jarName
    manifest {
        attributes(
                'Class-Path':'log4j.jar'
        )
        attributes([
                'Built-By': ant.properties['user.name'],
                'Implementation-Version': "${gnomex_version}.${buildNum}    (${formattedDate})"
        ],'gnomex')
    }
}

task clientJar (type: Jar) {
    dependsOn compileJava
    println buildDir.getAbsolutePath()
    from buildDir.getAbsolutePath() + "/classes/main/"
    include "hci/gnomex/httpclient/*.class"
    archiveName = clientJarName

    manifest {
        attributes([
                'Built-By': ant.properties['user.name'],
                'Implementation-Version': gnomex_version
        ],'gnomexClient')
    }
}

task realmJar (type: Jar) {
    archiveName = realmJarName
    from sourceSets.main.output.classesDir
    include 'hci/gnomex/utility/Util.class'
    include 'hci/gnomex/utility/TomcatCatalinaProperties.class'
    include 'hci/gnomex/security/ActiveDirectory.class'
    include 'hci/gnomex/security/EncrypterService.class'
    include 'hci/gnomex/security/EncryptionUtility.class'
    include 'hci/gnomex/security/tomcat/*.class'

    manifest {
        attributes([
                'Built-By': ant.properties['user.name'],
                'Implementation-Version': gnomex_version
        ],'gnomexRealm')
    }
}

//helper task for war plugin
task copyScripts {
    doLast {
        copy {
            from 'scripts'
            include '*.*'
            into buildDir.getAbsolutePath() + "/scripts"
            filter(FixCrLfFilter)
        }
    }
}

task opensourceWar (type: War) {
    archiveName = warName
    classpath = classpath - sourceSets.main.output

    from(buildDir.getAbsolutePath()) {
        include '*.swf'
        include '*.html'
        include '*.jsp'
        include '*.js'
        include 'assets/*.*'
    }

    exclude 'gnomexlite'

    manifest {
        attributes (
                'Built-By': ant.properties['user.name'],
                'Implementation-Version': "${gnomex_version}.${buildNum}    (${formattedDate})"
        )
    }

    replaceString("${webrootDir}/WEB-INF/web.xml", "gnomexLite.jsp", "gnomexFlex.jsp");

    //use UNIX eol convention
    from("${buildDir}/scripts") {
        include "*.sh"
        filter(FixCrLfFilter.class,
                eol: FixCrLfFilter.CrLf.newInstance("lf"))
        into 'scripts'
    }

    from(buildDir.getAbsolutePath() + "/libs"){
        include jarName
        include clientJarName
        into 'WEB-INF/lib'
    }

    from("${baseDir}/META-INF") {
        include "context_opensource.xml"
        into 'META-INF/context.xml'
    }

    replaceString("${rescDir}/hibernate.tomcat.cfg.xml", "SQLServerDialect", "MySQLDialect")

    from(rescDir) {
        include '*.*'
        into 'WEB-INF/classes'
    }

    from("${rescDir}/hci/gnomex") {
        include 'Dictionaries.xml'
        into 'WEB-INF/classes'
    }

    from(baseDir) {
        include "UCSCExecutables/**"
    }

    from("${baseDir}/src/main/webapp"){
        include "getXML.jsp"
        include "getHTML.jsp"
        into 'WEB-INF/classes'
    }

    replaceString("${rescDir}/hibernate.tomcat.cfg.xml", "MySQLDialect", "SQLServerDialect")

}

war {
    archiveName = warName
    classpath = classpath - sourceSets.main.output

    from(buildDir.getAbsolutePath()) {
        include '*.swf'
        include '*.html'
        include '*.jsp'
        include '*.js'
        include 'assets/*.*'
    }

    exclude 'gnomexlite'

    manifest {
        attributes (
                'Built-By': ant.properties['user.name'],
                'Implementation-Version': "${gnomex_version}.${buildNum}    (${formattedDate})"
        )
    }

    replaceString("${webrootDir}/WEB-INF/web.xml", "gnomexLite.jsp", "gnomexFlex.jsp");

    from(buildDir.getAbsolutePath() + "/libs"){
        include jarName
        include clientJarName
        into 'WEB-INF/lib'
    }

    from("${baseDir}/META-INF") {
        include "context.xml"
        into 'META-INF'
    }

    from("$buildDir/scripts"){
        into "scripts"
    }
    // move these files to src/main/resources file
    from(rescDir) {
        include '*.*'
        into 'WEB-INF/classes'
    }

    from("${rescDir}/hci/gnomex") {
        include 'Dictionaries.xml'
        into 'WEB-INF/classes'
    }

    from(baseDir) {
        include "UCSCExecutables/**"
    }

    from("${baseDir}/src/main/webapp"){
        include "getXML.jsp"
        include "getHTML.jsp"
        into 'WEB-INF/classes'
    }

    from("${baseDir}/src/main/webapp"){
        include "getXML.jsp"
        include "getHTML.jsp"
        into buildDir.getAbsolutePath() + "/tomcat"
    }
}

task gnomexLiteWar (type: War) {
    dependsOn jar
    archiveName = glWarName
    classpath = classpath - sourceSets.main.output

    from(buildDir.getAbsolutePath()) {
        include '*.swf'
        include '*.html'
        include '*.jsp'
        include '*.js'
        include 'assets/*.*'
    }

    exclude 'gnomexlite'

    manifest {
        attributes (
                'Built-By': ant.properties['user.name'],
                'Implementation-Version': "${gnomex_version}.${buildNum}    (${formattedDate})"
        )
    }

    from(buildDir.getAbsolutePath() + "/libs"){
        include jarName
        include clientJarName
        into 'WEB-INF/lib'
    }

    from("${baseDir}/src/main/webapp"){
        include "getXML.jsp"
        include "getHTML.jsp"
        into 'WEB-INF/classes'
    }

    from("${webrootDir}/gnomexlite"){
        include "GNomExLite.properties"
        into 'WEB-INF/classes'
    }


    from("${baseDir}/src/main/webapp/gnomexlite"){
        include "gnomexLite.jsp"
        into 'WEB-INF/classes'
    }

    from("${baseDir}/src/main/webapp/gnomexlite"){
        include "gnomexLite.jsp"
    }

    replaceString("${webrootDir}/WEB-INF/web.xml", "gnomexFlex.jsp", "gnomexLite.jsp");

    from("${baseDir}/META-INF") {
        include "context.xml"
        into 'META-INF'
    }

    from("${baseDir}/scripts"){
        into "scripts"
    }

    // move these files to src/main/resources file
    from(rescDir) {
        include '*.*'
        into 'WEB-INF/classes'
    }

    from("${rescDir}/hci/gnomex") {
        include 'Dictionaries.xml'
        into 'WEB-INF/classes'
    }

    from(baseDir) {
        include "UCSCExecutables/**"
    }
}


task createOpenSourceZip(type: Zip){
    //dependsOn releaseOpensource
    archiveName = openSourceZipName

    from(baseDir){
        include "README_INSTALL.txt"
        filter(FixCrLfFilter.class,
                eol: FixCrLfFilter.CrLf.newInstance("lf"))
        into openSourceName
    }

    from(baseDir) {
        include "README_UPGRADE.txt"
//        expand([
//                VERSION: gnomex_version
//        ])
        into openSourceName
    }

    from("${baseDir}"){
        include "LICENSE.txt"
        into openSourceName
    }

    from("${baseDir}/config/tomcat_config") {
        include "*.jar"
        into "${openSourceName}/server/tomcat/lib"
    }

    from("${baseDir}/scripts") {
        include "*.*"
        into "${openSourceName}/scripts"
    }

    from(buildDir.getAbsolutePath() + "/libs") {
        include warName
        include clientJarName
        include realmJarName
        into "${openSourceName}/gnomex/build"
    }

    //TODO: need to figure out how to make a secure version of gnomex (aka https)
    from(buildDir.getAbsolutePath() + "/secure") {
        include warName
        into "${openSourceName}/gnomex/build/secure"
    }

    from("${baseDir}/doc") {
        include "*/**"
        into "${openSourceName}/gnomex/doc"
    }

    from("${baseDir}/sql") {
        include "*/**"
        into "${openSourceName}/gnomex/sql"
    }

}

task gnomex_deploy << {
    copy {
        from war
        into "${serverHome}/${deployDir}"
    }

    copy {
        from gnomexLiteWar
        into "${serverHome}/${deployDir}"
    }

    copy {
        from realmJar
        into "${serverHome}/lib"
    }
}

//TODO gnomexlite-opensource target
//TODO build opensource gnomexlite
//TODO: Do we need genoviz task???