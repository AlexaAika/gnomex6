<?xml version="1.0" encoding="utf-8"?>
<util:ResizableTitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
						   layout="vertical" width="1000" 
						   xmlns:util="views.util.*"
						   height="408" creationPolicy="all"
						   closeable="true" creationComplete="centerMe()"
						   close="{closeMe()}" 
						   title="{'Upload Files for Product Order ' + productOrderNumber}"  xmlns:controls="hci.flex.controls.*">
	
	<mx:HTTPService  
		id="getProductOrderUploadURL" 
		url="UploadProductOrderURLServlet.gx"
		resultFormat="e4x"
		showBusyCursor="true" 
		result="onGetProductOrderUploadURL(event)" 
		fault="parentApplication.onFailHttpRequest('Failed to get product upload URL', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService>
	
	
	<mx:HTTPService  
		id="fdtUploadStart" 
		url="FastDataTransferUploadStart.gx"
		resultFormat="e4x"
		showBusyCursor="true" 
		result="onFdtUploadStart(event)" 
		fault="parentApplication.onFailHttpRequest('Failed to start FDT upload', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService>
	
	
	
	<mx:HTTPService  
		id="getProductOrder" 
		url="GetProductOrder.gx"
		resultFormat="e4x"
		showBusyCursor="true" 
		result="onGetProductOrder(event)" 
		fault="parentApplication.onFailHttpRequest('Failed to get Product Order', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService>
	
	<mx:HTTPService  
		id="getProductOrderDownloadList" 
		url="GetProductOrderDownloadList.gx"
		destination="getProductOrderDownloadList"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onGetProductOrderDownloadList(event)"
		fault="parentApplication.onFailHttpRequest('Failed to get Product Order download list', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService >
	
	<mx:HTTPService  
		id="organizeProductOrderUploadFiles" 
		url="OrganizeProductOrderUploadFiles.gx"
		resultFormat="e4x"
		showBusyCursor="true"
		result="onOrganizeProductOrderUploadFiles(event)"
		fault="parentApplication.onFailHttpRequest('Failed to organize Product Order upload files', event)"
		method="POST"
		useProxy="false">
	</mx:HTTPService >
	
	<mx:Script>
		<![CDATA[
			import mx.collections.HierarchicalData;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.controls.Alert;
			import mx.controls.List;
			import mx.controls.listClasses.ListBase;
			import mx.core.DragSource;
			import mx.events.CloseEvent;
			import mx.events.DragEvent;
			import mx.events.ItemClickEvent;
			import mx.events.ListEvent;
			import mx.managers.DragManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import views.util.GNomExStringUtil;
			import views.util.MultiFileUpload;
			
			[Bindable]
			public var idProductOrder:Object;
			
			[Bindable]
			private var productOrderNumber:Object;
			
			[Bindable]
			public var productOrder:Object;
			
			[Bindable]
			public var parentView:ProductOrderDownloadView = new ProductOrderDownloadView;
			
			[Bindable]
			private var productOrderFileList:XMLListCollection = new XMLListCollection();
			
			[Bindable]
			private var masterFileList:XMLListCollection = new XMLListCollection();
			
			private var multiFileUpload:MultiFileUpload;
			
			private var expFileDict:Dictionary = new Dictionary();
			
			private var downloadDraggedItems:Array = null;
			
			private var clickedItems:XMLListCollection = new XMLListCollection();
			
			private var treeItemToSelect:Object = null;
			
			private var selectedExpFileTreeIndex:int = 0;
			
			private var linkedSampleFiles:XMLListCollection = new XMLListCollection();
			
			private var FILE_DESCRIPTOR_NAME:String = "FileDescriptor";

			public var showFdtCommand:Boolean = false;
			
			public function init(productOrder:Object):void {
				this.idProductOrder = productOrder.@idProductOrder;
				this.productOrderNumber = productOrder.@productOrderNumber;
				this.productOrder = productOrder;
				
				fdtStartButton.enabled = true;
				saveUUID.text = "";
				
				getProductOrderUploadURL.send();
						
				var params:Object = new Object();
				params.idProductOrder = idProductOrder;
				params.includeUploadStagingDir = 'N';
				params.skipUploadStagingDirFiles = 'Y';

				getProductOrderDownloadList.send(params);
				refreshUploadFiles();
				this.addEventListener("refreshUploadFiles", onUploadFinished);
			}
			
			public function centerMe():void{
				PopUpManager.centerPopUp(this);
			}
			
			private function refreshFiles():void {
				expFileDict = new Dictionary();
				filesToRemove.removeAll();
				filesToUnlink.removeAll();
				this.linkedSampleFiles.removeAll();
				this.dirty.resetDirty();
				
				refreshUploadFiles();
				
				var params:Object = new Object();
				params.idProductOrder = idProductOrder;
				params.includeUploadStagingDir = 'N';
				params.skipUploadStagingDirFiles = 'Y';

				getProductOrderDownloadList.send(params);
				
			}
			
			private function onGetProductOrderUploadURL(event:ResultEvent):void {
				if (getProductOrderUploadURL.lastResult.name() == "UploadProductOrderURL") {
					var url:String = getProductOrderUploadURL.lastResult.@url;
					initializeFileUploadControl(url);
				}
			}
			
			
			private function onFdtUploadStart(event:ResultEvent):void {
				if (fdtUploadStart.lastResult.name() == "FDTUploadUuid") {
					var uuid:String = fdtUploadStart.lastResult.@uuid;
					saveUUID.text = uuid;
					fdtStartButton.enabled = false;
					
					var url:URLRequest = new URLRequest('FastDataTransferUploadGetJnlpServlet.gx');
					var uv:URLVariables = new URLVariables();
					uv.uuid = uuid;
					url.data = uv;
					url.method = URLRequestMethod.POST;
					navigateToURL(url, '_self');				
				}
			}
			
			
			public function initializeFileUploadControl(uploadServletURL:String):void{
				
				if (multiFileUpload == null) {
					var postVariables:URLVariables = new URLVariables;
					postVariables.idProductOrder = idProductOrder; 
					
					multiFileUpload = new MultiFileUpload(
						this.uploadFilesGrid,
						this.uploadBrowseButton,
						this.uploadClearButton,
						this.uploadDeleteButton,
						this.uploadButton,
						this.uploadProgressBar,
						uploadServletURL,
						postVariables,
						0,
						null
					);
					
					multiFileUpload.addEventListener(Event.COMPLETE, onUploadFinished);
					multiFileUpload.addEventListener(Event.OPEN, onChooseFileToUpload);
					
					this.uploadBrowseButton.enabled = true;
					this.uploadClearButton.enabled = true;
					this.uploadDeleteButton.enabled = true;
				} 
				
			}
			
			public function refreshUploadFiles():void {
				if(idProductOrder != null){  
					var params:Object = new Object();
					params.idProductOrder = idProductOrder;
					params.showUploads = "Y";
					getProductOrder.send(params);
				}
			}
			
			public function onUploadFinished(event:Event):void{
				this.theTab.selectedIndex = 1;
				refreshUploadFiles();
				refreshFiles();
			}
			
			private function onGetProductOrder(event:ResultEvent): void {
				if (getProductOrder.lastResult.name() == "ProductOrder") {
					newFolderButton.enabled = true;
					sortFileList(uploadedFiles);
					for each(var fd:XML in uploadedFiles){
						expFileDict[String(fd.@displayName)] = fd;
					}
					constructProductOrderFileList();
				}
			}
			
			
			public function onChooseFileToUpload(event:Event):void {
			}
			
			
			private function onGetProductOrderDownloadList(event:ResultEvent): void {
				if (getProductOrderDownloadList.lastResult.name() != "ProductOrderDownloadList") {
					mx.controls.Alert.show(getProductOrderDownloadList.lastResult..ACTMESSAGE.@TEXT);
					return;
				} else {
					recurseGetFileDescriptors(downloadList.children());
					constructProductOrderFileList();
					callLater(expandDownloadTree);
				}  	 
			}
			
			private function recurseGetFileDescriptors(list:XMLList):void{
				if(list.length() == 0){
					return;
				}
				for each(var fd:XML in list){
					if(fd.name() == this.FILE_DESCRIPTOR_NAME){
						expFileDict[String(fd.@displayName)] = fd.copy();
					} else if(fd.name() == 'ProductOrderDownload'){
						recurseGetFileDescriptors(fd.children());
					}
					
				}
			}
			
			private function recurseFindFileToDelete(expFileList:XMLList, fileToFind:XML):void{
				for each(var file:XML in expFileList){
					if(file.name() == 'ProductOrderDownload' && file.children().length() > 0){
						recurseFindFileToDelete(file.children(), fileToFind);
					}
					else if(file.name() == this.FILE_DESCRIPTOR_NAME){
						if(file.@type == 'dir'){
							recurseFindFileToDelete(file.children(), fileToFind);
						} else{
							if(file.@zipEntryName == fileToFind.@zipEntryName){
								deleteNode(file);
								return;
							}
						}
					}
				}
			}
			
			private function deleteEmptyFolders(expFile:XML):void{
				if((expFile.@type == 'dir' || expFile.name() == 'ProductOrderDownload') && expFile.children().length() == 0){
					var parent:XML = expFile.parent(); 
					deleteNode(expFile);
					if(parent != null){
						deleteEmptyFolders(parent);
					}
				} else if(expFile.@type == 'dir'){
					for each(var child:XML in expFile.children()){
						deleteEmptyFolders(child);
					}
				}
			}
			
			private function constructProductOrderFileList():void{
				var list:XMLList = new XMLList(downloadList.copy());
				var uploadNode:XML = <ProductOrderDownload itemNumber="upload_staging" />;
				for each(var uf:XML in uploadedFiles){
					uploadNode.appendChild(uf.copy());
				}
				if(uploadNode.children().length() > 0){
					list.appendChild(uploadNode);
				}
				productOrderFileList = new XMLListCollection(list.copy());
				sortFileList(productOrderFileList);
				masterFileList = new XMLListCollection(list.copy());
				
				for each(var node:XML in productOrderFileList.children()){
					if((node.children().length() == 0 && node.name() != this.FILE_DESCRIPTOR_NAME) || (node.children().length() == 0 && node.name() == this.FILE_DESCRIPTOR_NAME && node.@type == 'dir')){
						deleteNode(node);
					}
				}
				
				for each(var fd:XML in productOrderFileList.children().children()){
					deleteEmptyFolders(fd);	
				}
				
			}
			
			private function sortFileList(theList:XMLListCollection):void{
				var sort:Sort = new Sort();
				sort.fields = [new SortField("@displayName", true)];
				theList.sort = sort;
				theList.refresh();
				for each(var child:XML in theList){
					if(child.children().length() > 0){
						var childList:XMLListCollection = new XMLListCollection(child.children());
						sortFileList(childList);
						child.setChildren(childList.copy());
					}
					
				}
				theList.refresh();
			}
			
			private function sortClickedItems():void{
				var sort:Sort = new Sort();
				sort.fields = [new SortField("@displayName", true)];
				clickedItems.sort = sort;
				clickedItems.refresh();
			}
			
			private function expandDownloadTree():void {
				var maxFiles:int = 60;
				var count:int = 0;
				if (downloadTree != null && downloadList.length > 0) {
					downloadTree.expandItem(downloadList.getItemAt(0),true); 
					for each(var a:Object in getProductOrderDownloadList.lastResult..ProductOrder.FileDescriptor) {
						downloadTree.expandItem(a,true);
						count++;
						if (count>=maxFiles){
							break;
						}
					}
				}
			}
			
			private function save():void {
				var params:Object = new Object();
				params.idProductOrder = idProductOrder;
				params.filesXMLString = downloadList.toXMLString();
				if (filesToRemove.length > 0) {
					params.filesToRemoveXMLString = filesToRemove.toXMLString();			
				}
				organizeProductOrderUploadFiles.send(params);
			}
			
			private function onOrganizeProductOrderUploadFiles(event:ResultEvent): void {
				if (organizeProductOrderUploadFiles.lastResult.name() != "SUCCESS") {
					mx.controls.Alert.show(organizeProductOrderUploadFiles.lastResult..ACTMESSAGE.@TEXT);
				} else {
					refreshFiles();
				} 	 
			}
			private function getFilesGridRowNumber(item:Object,col:int):String
			{
				var x:int = filesGrid.dataProvider.getItemIndex(item) + 1;
				return String(x);
			}
					
			private function recurseFindFile(fileToFind:XML):Boolean{
				
				for each(var file:XML in productOrderFileList.children()){
					if(file.name() == 'ProductOrderDownload' && file.@itemNumber == fileToFind.@itemNumber){
						return true;
					} else if (file.name() == 'ProductOrderDownload' && file.children().length() > 0){
						recurseFindFileToDelete(file.children(), fileToFind);
					} else if(file.name() == this.FILE_DESCRIPTOR_NAME && file.@displayName == fileToFind.@displayName ){
						return true;
					} else if(file.name() == this.FILE_DESCRIPTOR_NAME && file.@type == 'dir' && file.children().length() > 0){
						recurseFindFileToDelete(file.children(), fileToFind);
					} else{
						return false;
					}
				}
				return false;
			}
			
			
			private function getDownloadName(item:Object):String {
				var info:String = item.name() == "ProductOrderDownload" && item.hasOwnProperty("@info") && item.@info != "" ? " - " + item.@info : "";
				if (item.name() == "ProductOrderDownload") {
					if (item.hasOwnProperty("@itemNumber") && item.@itemNumber != '') {
						var results:String = item.hasOwnProperty("@results") && item.@results != '' ? " - " + item.@results : '';
						return item.@itemNumber + results + info;
					} else {
						return item.@results + info;
					}
				} else {
					return item.@displayName + info;
				} 
			}
			
			public function showAddFolderWindow():void {
				if (this.downloadTree.selectedItem == null) {
					this.downloadTree.selectedIndex = 0;
				}
				
				var addFolderWindow:FolderAddWindow = FolderAddWindow(PopUpManager.createPopUp(DisplayObject(parentApplication.theBody), FolderAddWindow, true));
				PopUpManager.centerPopUp(addFolderWindow);
				addFolderWindow.uploadWindow = this;
				addFolderWindow.folderName.setFocus();
			}
			
			public function addDownloadFolder(folderName:String):void {
				
				var parent:XML = XML(downloadTree.selectedItem);
				if (this.downloadTree.selectedItem.@type != 'dir' && parent.name() != "ProductOrder" && parent.name() != "FileDescriptor") {
					parent = XML(downloadTree.selectedItem).parent();
				} 
				
				var folder:XML = new XML("<FileDescriptor isNew='Y' " +
					"key='X\tX\tX\t" + GNomExStringUtil.makeXMLSafe(folderName) + "' " +
					"displayName='" + GNomExStringUtil.makeXMLSafe(folderName) + "' " +
					"type='dir'" +
					"isEmpty='Y'" +
					"info='' />");
				if (parent.children().length() > 0) {
					var firstChild:XML = parent.children()[0];
					parent.insertChildBefore(firstChild, folder);	 		    	
				} else {
					parent.appendChild(folder);
				}	    	                         
				this.downloadTree.expandItem(parent, true);
				this.downloadTree.selectedItem = null;
				this.downloadTree.selectedItem = folder;
				this.downloadTree.scrollToIndex(this.downloadTree.selectedIndex); 
				this.downloadTree.selectedItem = null;
			}
			
			
			private function removeExperimentFile():void {
				if (this.filesGrid.selectedItems != null && this.filesGrid.selectedItems.length > 0) {
					for each(var uploadFile:XML in this.filesGrid.selectedItems) {
						this.filesToRemove.addItem(uploadFile);
						this.uploadedFiles.removeItemAt(uploadedFiles.getItemIndex(uploadFile));
					}
					this.dirty.setDirty();
				} else if (this.downloadTree.selectedItems != null && this.downloadTree.selectedItems.length > 0) {
					for each(var downloadFile:XML in this.downloadTree.selectedItems) {
						// Only add to remove list if this file exists
						if (downloadFile.hasOwnProperty("@fileName")) {
							this.filesToRemove.addItem(downloadFile);
						}
						// Delete from XML hierarchy
						this.deleteNode(downloadFile);
						
					}
					
					this.dirty.setDirty();
				}
			}
			
			private function onTabChange():void {
				if (theTab.selectedIndex == 1) {
					if (this.uploadedFiles == null || this.uploadedFiles.length == 0) {
						refreshFiles();
					}
				} else if (theTab.selectedIndex == 2){
					refreshFiles();
					refreshUploadFiles();
				}
			}			

			
			private function checkRecursiveParent(dragItem:XML, dropNode:XML):Boolean {
				if (dropNode.name() == "ProductOrderList") {
					return false;
				}
				if (dropNode.parent().@displayName == dragItem.@displayName) {
					return true;
				}
				return checkRecursiveParent(dragItem, dropNode.parent());
			}
			
			private function onDragDropFile(event:DragEvent) : void
			{
				
				// For some reason, preventDefault on AdvancedDataGrid
				// isn't enough to stop the defaut drop operation from
				// occurring. So I added hidDropFeedback and showFeedback
				// and that seemed to do the trick.	
				//this.downloadTree.hideDropFeedback(event);
				//event.preventDefault();
				//DragManager.showFeedback(DragManager.NONE);
				
				// determine where in the grid the drop occurs and select that node by the index; 
				// followed by retrieving the node itself. 
				var dropNode:XML = null;
				var dropFolderNode:XML = null;
				var siblingDropNode:XML = null;
				//var r:int = downloadTree.calculateDropIndex(event);
				//if (r > 0) { 
				//  r--;
				//}
				//downloadTree.selectedIndex = r;
				if(downloadTree.selectedItem != null) {
					dropNode = downloadTree.selectedItem as XML;
					
					// Don't allow drag operation if nothing no drop node
					// found
					if (dropNode == null) {
						event.preventDefault();
						event.target.hideDropFeedback(event);
						DragManager.showFeedback(DragManager.NONE);
						return;
					}
					
					dropFolderNode = dropNode;
					if (dropNode.name() == this.FILE_DESCRIPTOR_NAME && dropNode.@type != "dir") {
						dropFolderNode = dropNode.parent();
						siblingDropNode = dropNode;
					}
					// Don't allow drag operation if nothing no drop folder node
					// found
					if (dropFolderNode == null) {
						event.preventDefault();
						event.target.hideDropFeedback(event);
						DragManager.showFeedback(DragManager.NONE);
						return;
					}
					
					// get the drag format (its always items in our case
					// Get the dragged items
					var draggedItems:Array = null;		    
					if (event.dragInitiator.name == "downloadTree") {
						// For some reason, if we are dragging within the tree, the dragged
						// items has to be detected on the dragEnter event.  By the time
						// with get to the dragDrop event, the event.draggedItems contains
						// the drop target, not the dragged items.
						draggedItems = this.downloadDraggedItems;	    
					} else {
						var draggedFormat:String = event.dragSource.formats[0];
						draggedItems = event.dragSource.dataForFormat(draggedFormat) as Array;	
					}
					for(var i:int = 0; i < draggedItems.length; i++) {
						var dragItem:XML = XML(draggedItems[i]);
						if (dragItem.name() == this.FILE_DESCRIPTOR_NAME || dragItem.name() == "ProductOrderDownload") {
							var fileNode:XML;
							if (dragItem.name() == this.FILE_DESCRIPTOR_NAME ){
								fileNode = new XML("<FileDescriptor " +
									" displayName='" +  GNomExStringUtil.makeXMLSafe(dragItem.@displayName) + "'" + 
									" fileName='" +  GNomExStringUtil.makeXMLSafe(dragItem.@fileName) + "'" + 
									" type='" + dragItem.@type + "'" +
									" directoryName='" + GNomExStringUtil.makeXMLSafe(dragItem.@directoryName) + "'/>");
							}
							if (dragItem.name() == "ProductOrderDownload" ){
								fileNode = new XML("<FileDescriptor " +
									" displayName='" +  GNomExStringUtil.makeXMLSafe(dragItem.@itemNumber) + "'" + 
									" fileName='" +  GNomExStringUtil.makeXMLSafe(dragItem.@fileName) + "'" + 
									" type='dir'" +
									" directoryName='" + GNomExStringUtil.makeXMLSafe(dragItem.@directoryName) + "'/>");
							}
							
							
							for each ( var child:Object in dragItem.children() ) {
								fileNode.appendChild(child);	
							}
							
							// Don't allow dropping on yourself (causes a cyclical error)
							if ( fileNode.@fileName == dropFolderNode.@fileName ){
								return;
							}
							
							if (siblingDropNode != null) {
								dropFolderNode.insertChildAfter(siblingDropNode, fileNode);	       				
							} else {
								dropFolderNode.appendChild(fileNode);
							}
							downloadTree.expandItem(dropFolderNode, true);
							
							// We have to manually remove the file when we are
							// dragging within the download tree.
							if (event.dragInitiator.name == "downloadTree") {
								deleteNode(dragItem);
								downloadTree.selectedItem = null;
							}
							this.dirty.setDirty();
						} 
					}
				}
			}
			
			private function deleteNode(xmlToDelete:XML):Boolean {
				var cn:XMLList = XMLList(xmlToDelete.parent()).children();
				
				for ( var i:Number = 0 ; i < cn.length() ; i++ ){
					if ( cn[i] == xmlToDelete ) {
						delete cn[i];       
						return true;
					}
				}
				return false;
			}
			
			private function doDragEnter(event:DragEvent):void
			{
				// Keep track of what was dragged.
				var draggedFormat:String = event.dragSource.formats[0];
				downloadDraggedItems = event.dragSource.dataForFormat(draggedFormat) as Array;
				
				// Cancel default behaviour
				event.preventDefault();
				// Tell the DragManager that the Tree will accent the DragDrop
				DragManager.acceptDragDrop(Tree(event.target));
				// hide the "drop line" that is shown in Tree control
				// when dropping in a Tree
				//downloadTree.showDropFeedback(event);
			}
			
			private function doDragOver(event:DragEvent):void
			{
				// Show the default "drop line" in the Tree control
				//downloadTree.showDropFeedback(event);
				// Cancel default behaviors
				
				var r:int = downloadTree.calculateDropIndex(event);
				if (r > 0) { 
					r--;
				}
				downloadTree.selectedIndex = r;
				var dropNode:XML = downloadTree.selectedItem as XML;
				
				var dropFolderNode:XML = dropNode;
				if (dropNode.name() == this.FILE_DESCRIPTOR_NAME && dropNode.@type != "dir") {
					dropFolderNode = dropNode.parent();
				}  else if (dropNode.name() == "ProductOrder" && r != 0) {
					if (dropNode.children().length() > 0) {
						dropFolderNode = dropNode.children()[0];
					} else {
						dropFolderNode = null;
					}
				} 
				
				if (dropFolderNode != null) {
					downloadTree.selectedItem = dropFolderNode;
				}
				
				event.preventDefault();
			}
			
			private function doDragExit(event:DragEvent):void
			{
				// hide the "drop line" that is shown in Tree control
				// when dropping in a Tree
				downloadTree.hideDropFeedback(event);
			}
			
			private function doDragComplete(event:DragEvent):void
			{
				// hide the "drop line" that is shown in Tree control
				// when dropping in a Tree
				downloadTree.hideDropFeedback(event);
			}
			
			
			public function showHTMLUploadForm():void {
				var url:URLRequest = new URLRequest('uploadExperimentFile.jsp?productOrderNumber=' + this.productOrderNumber);
				navigateToURL(url, '_blank');			
				this.theTab.selectedIndex = 1;
			}
			
			private function renameFile(event:MouseEvent):void{
				if((filesGrid.selectedItem == null && downloadTree.selectedItem == null) || downloadTree.selectedIndex == 0){
					return;
				}
					
				else{
					var renameWindow:RenameProductOrderWindow = RenameProductOrderWindow(mx.managers.PopUpManager.createPopUp(this, RenameProductOrderWindow, true));
				}
				
				if(downloadTree.selectedItem != null){
					var selectedNode:XML = XML(downloadTree.selectedItem);
					if(selectedNode.name() == "ProductOrderDownload"){
						renameWindow.oldProductOrderName = selectedNode.@key;
					}
					else{
						renameWindow.oldProductOrderName = downloadTree.selectedItem.@displayName;
					}
				}
				else{
					var filesGridNode:XML = XML(filesGrid.selectedItem);
					if(filesGridNode.name() == "ProductOrderDownload"){
						renameWindow.oldProductOrderName = filesGridNode.@key;
					}
					else{
						renameWindow.oldProductOrderName = filesGrid.selectedItem.@displayName;
					}
				}
				var oldName:String = downloadTree.selectedItem.name() == "ProductOrderDownload" ? downloadTree.selectedItem.@itemNumber : downloadTree.selectedItem.@displayName;
				renameWindow.oldName = oldName;
				renameWindow.fileList = this.downloadList;
				renameWindow.idProductOrder = this.idProductOrder;
				renameWindow.addEventListener("refreshUploadFiles", onUploadFinished);
				mx.managers.PopUpManager.centerPopUp(renameWindow);
				renameWindow.nameProductOrder.setFocus();
			}
			
			private function closeMe():void{
				var params:Object = new Object();
				params.idProductOrder = productOrder.@idProductOrder;
				params.idLab = productOrder.@idLab;
				parentView.getProductOrderDownloadList.send(params);
				PopUpManager.removePopUp(this);
			}
			
			public function startFDTUpload():void {			
				var params:Object = new Object();		
				params.idProductOrder = idProductOrder;
				fdtUploadStart.send(params);
			}
			
			
			private function getSampleNumberOrFileName(item:Object, column:Object):String {
				if(item.name() == this.FILE_DESCRIPTOR_NAME){
					return item.@displayName;
				}else{
					return '';
				} 
			}
			
			private function showFileNameToolTip(item:Object):String {
				if(item != null && item.hasOwnProperty("@displayName")){
					return item.@displayName;
				} else{
					return "";
				}
				
			}
						
			private function onDragDropReturn(event:DragEvent):void{
				event.preventDefault();
				event.target.hideDropFeedback(event);
				
				if(event.dragInitiator.name == 'experimentFilesTree'){
					clickedItems = new XMLListCollection();
					return;
				}
				
				for each(var file:XML in clickedItems){
					if(file.hasOwnProperty("@idExperimentFile")){
						filesToUnlink.addItem(file.copy());
					}
					var fileName:String = file.@zipEntryName; 
					var shortFileName:String = fileName.substring(fileName.indexOf(productOrder.@number));
					var filePart:String = fileName.split("/")[1];
					var node:XML = null;
					for each(var dl:XML in masterFileList.children()){
						if(filePart == dl.@itemNumber || fileName == dl.@zipEntryName){
							node = dl.copy();
							break;
						}
					}
					for each(var expFile:XML in productOrderFileList.children()){
						if(expFile.@itemNumber == filePart){
							deleteNode(expFile);
							break;
						}
					}
					if(node != null){
						productOrderFileList.source.appendChild(node);
					}
					
					for each(var fd:XML in productOrderFileList.children().children()){
						deleteEmptyFolders(fd);	
					}
				}
				
				
				clickedItems = new XMLListCollection();
				this.dirty.setDirty();
				event.target.hideDropFeedback(event);
			}
			
		]]>
	</mx:Script>	
	
	<mx:XMLListCollection id="files"/>
	<mx:XMLListCollection id="filesToMove"/>
	<mx:XMLListCollection id="uploadedFiles" source="{getProductOrder.lastResult..ProductOrderUpload.FileDescriptor}"/>
	<mx:XMLListCollection id="downloadList" source="{getProductOrderDownloadList.lastResult..ProductOrder}"/>
	<mx:XMLListCollection id="filesToRemove"/>
	<mx:XMLListCollection id="filesToUnlink"/>
	<mx:Canvas width="100%" height="100%">
		<mx:TextArea width="504" height="20" 
					 styleName="instructionBox" id="instructionBox" editable="false" wordWrap="true" visible="{theTab.selectedIndex == 1 || theTab.selectedIndex == 2}" text="Drag uploaded file into one of the folders on the right.To drag multiple files, hold CTRL or SHIFT key while selecting." right="0"/>
		<mx:TabNavigator id="theTab" change="onTabChange();"   width="100%" paddingTop="0" height="100%" styleName="form">
			<mx:VBox label="Upload files" width="100%" height="100%" verticalGap="2" paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4">
				<mx:ViewStack id="uploadFilesStack" width="100%" height="100%">
					<mx:VBox width="100%" height="100%">
						<mx:HBox height="20" width="100%">						
							<mx:LinkButton id="uploadBrowseButton" label="Choose files" icon="@Embed(source='../../assets/add.png')" disabledIcon="@Embed(source='../../assets/add_disable.png')"  toolTip="Choose file(s) to upload"  textDecoration="underline" enabled="false"/>
							<mx:LinkButton id="uploadDeleteButton" label="Remove" disabledIcon="@Embed(source='../../assets/delete_disable.png')" icon="@Embed(source='../../assets/delete.png')" toolTip="Remove file"  textDecoration="underline" enabled="false"/>
							<mx:LinkButton label="Clear all" toolTip="Clear all files" id="uploadClearButton" icon="@Embed(source='../../assets/cross.png')" disabledIcon="@Embed(source='../../assets/cross_disable.png')" textDecoration="underline" enabled="false"/>
							<mx:HBox width="100%"  horizontalAlign="right">
								<mx:VRule height="20"/>
								<mx:LinkButton visible="{parentApplication.isFDTSupported &amp;&amp; showFdtCommand}" label="Upload problems?  Try this." click="showHTMLUploadForm()" textDecoration="underline" icon="@Embed(source='../../assets/application_get.png')"/>
								<util:ContextHelp context1="uploadhelp" 
												  showEdit="{parentApplication.isAdminState}" title="Upload Help"
												  label="Upload Help" labelPlacement="right" id="labelApplication0"/>								
							</mx:HBox>			          
						</mx:HBox>
						<mx:DataGrid id="uploadFilesGrid" width="100%" height="100%">				
						</mx:DataGrid>	
					</mx:VBox>
					<mx:VBox width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
						<mx:TextArea styleName="instructionBox" width="100%" wordWrap="true" height="100%" id="textarea1" fontSize="12">
							<mx:htmlText><![CDATA[This method of uploading files uses a Fast Data Transfer (FDT) server. To upload files:<br><br>     1. Select the "Start" button below.<br><br>     2. This will download a special "jnlp" file that can be opened using Java Web Start (either directly or after first saving<br>         the file to your desktop).<br><br>     3. Use the window launched by Java Web Start to select and upload the files to the server.<br><br>     4. After all of the files have been uploaded (% Completed column indicates 100 for all files), click the<br>        "Organize files" link on Experiment Detail to move the uploaded files to the appropriate folders.<br>         button.]]></mx:htmlText>
						</mx:TextArea>							
					</mx:VBox>
				</mx:ViewStack>
			</mx:VBox>
			<mx:VBox width="100%" height="100%" label="Organize files"  paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4" verticalGap="2">
				<mx:HBox width="100%" horizontalGap="2" paddingLeft="0">
					<mx:LinkButton id="newFolderButton" label="New folder"  enabled="false" disabledIcon="@Embed(source='../../assets/folder_add_disable.png')" icon="@Embed(source='../../assets/folder_add.png')" toolTip="Create folder"  textDecoration="underline" click="showAddFolderWindow()" paddingLeft="0"/>
					<mx:LinkButton id="removeFileButton" label="Remove (from file system)"  enabled="{filesGrid.selectedItem != null || (this.downloadTree.selectedItem != null)}" disabledIcon="@Embed(source='../../assets/delete_disable.png')" icon="@Embed(source='../../assets/delete.png')" toolTip="Remove file"  textDecoration="underline" click="removeExperimentFile()" paddingLeft="0"/>
					<mx:LinkButton id="renameFileButton" label="Rename" textDecoration="underline" paddingLeft="0" click="renameFile(event)" enabled="{(this.downloadTree.selectedItem != null) &amp;&amp; this.downloadTree.selectedIndex != 0}" toolTip="Rename selected file or folder" icon="@Embed(source='../../assets/segment_import.png')" disabledIcon="@Embed(source='../../assets/segment_import_disable.png')"/>
					<mx:Spacer width="100%"/>
					<mx:LinkButton id="refresh" label="Refresh" icon="@Embed(source='../../assets/refresh.png')" toolTip="Refresh files list"  textDecoration="underline" click="refreshFiles()"/>
					
				</mx:HBox>
				
				<mx:HDividedBox width="100%" height="100%">
					<mx:VBox width="300" height="100%" verticalGap="0" styleName="form" >
						<mx:HBox width="100%"  backgroundColor="#C9BEC0" backgroundAlpha="0.22" >
							<mx:Label text="Uploaded Files"/>
						</mx:HBox>
						<mx:DataGrid id="filesGrid"  
									 dragEnabled="true"
									 showHeaders="false"
									 allowMultipleSelection="true"
									 width="100%" height="100%"
									 dataProvider="{uploadedFiles}" dragMoveEnabled="true" itemClick="{this.downloadTree.selectedItem = null; this.renameFileButton.enabled = false}">
							<mx:columns>
								<mx:DataGridColumn headerText="Uploaded file"  dataField="@displayName"/>
							</mx:columns>
						</mx:DataGrid>
					</mx:VBox>
					<mx:VBox width="50%" height="100%" verticalGap="0" styleName="form">
						<mx:HBox width="100%"  backgroundColor="#C9BEC0" backgroundAlpha="0.22" >
							<mx:Label text="Product Order Folders"/>
						</mx:HBox>
						<mx:Tree id="downloadTree"
								 width="100%" height="100%" 
								 iconFunction="parentApplication.getTreeIcon" 
								 dataProvider="{downloadList}"
								 borderStyle="solid" 
								 labelFunction="{getDownloadName}"
								 dropEnabled="true"  		                
								 dragEnabled="true"
								 dragMoveEnabled="true"  
								 allowMultipleSelection="true"
								 showRoot="true"
								 dragDrop="onDragDropFile(event)"
								 dragOver="doDragOver(event)"
								 dragEnter="doDragEnter(event)"
								 dragExit="doDragExit(event)"
								 itemClick="{this.filesGrid.selectedItem = null;}">
						</mx:Tree>		
					</mx:VBox>
				</mx:HDividedBox>
			</mx:VBox>
		</mx:TabNavigator>
	</mx:Canvas>
	<mx:ControlBar width="100%">
		<mx:ViewStack id="buttonStack" width="100%" selectedIndex="{theTab.selectedIndex == 2 ? 1 : theTab.selectedIndex}">
			<mx:HBox width="100%">
				<mx:ViewStack id="buttonStack_1" width="100%" selectedIndex="{uploadFilesStack.selectedIndex}">
					<mx:HBox height="100%" width="100%">
						<mx:ProgressBar id="uploadProgressBar"  width="100%" labelPlacement="center" trackHeight="15" height="20" fontWeight="normal" themeColor="#EAED9A"/>
						<mx:Button label="Upload files" id="uploadButton"  enabled="false" visible="true" disabledIcon="@Embed(source='../../assets/upload_disable.png')" icon="@Embed(source='../../assets/upload.png')"/>	
					</mx:HBox>				 
					<mx:HBox height="100%" width="100%">
						<mx:Spacer  width="100%" height="10"/>	
						<mx:Label id="saveUUID" text="" visible="false"/>
						<mx:Button id="fdtStartButton" label="Start" click="startFDTUpload();"  enabled="true" visible="true"/>	      	
					</mx:HBox>		  			 
				</mx:ViewStack>
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Spacer  width="100%" height="10"/>		
				<util:DirtyNote id="dirty"/>
				<mx:Button label="Save" id="saveButton"  enabled="true" click="save()" visible="true" icon="@Embed(source='../../assets/save.png')"/>	      	
				<mx:Button label="Close" enabled="true" click="{closeMe()}" visible="true" />	      	
			</mx:HBox>
		</mx:ViewStack>
	</mx:ControlBar>
	
</util:ResizableTitleWindow>
