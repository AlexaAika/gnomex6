<?xml version="1.0" encoding="utf-8"?>
<exp:TabSamplesBase
		   xmlns:mx="http://www.adobe.com/2006/mxml" 
		   xmlns:util="views.util.*"
		   xmlns:fx="*.views.renderers"
		   xmlns:exp="views.experiment.*"
		   xmlns:grid="views.util.grid.*"
		   show="{this.init();}"
		   label="Samples" width="100%" height="100%"  enabled="false"  xmlns:renderers="views.renderers.*" >

	<mx:Script>
		<![CDATA[
			import hci.flex.controls.DropdownLabel;
			import hci.flex.controls.Label;
			
			import mx.collections.XMLListCollection;
			import mx.controls.AdvancedDataGrid;
			import mx.controls.Alert;
			import mx.controls.TextInput;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import views.renderers.CheckBoxRenderer;
			import views.renderers.ComboBox;
			import views.renderers.ComboBoxWorkflowStatus;
			import views.renderers.GridColumnFillButton;
			import views.renderers.MultiselectRenderer;
			import views.renderers.URLRenderer;
			import views.util.AdvancedDataGridColumnWithType;
			import views.util.AnnotationAdvancedDataGridColumn;
			import views.util.CopySampleSheetColumnView;
			import views.util.SampleConcentrationValidator;
			import views.util.UploadSampleSheetInstructionsView;
			import views.util.UploadSampleSheetView;
			import views.util.SampleQCValidator;
			
			private var saveInstructionToolTipText:String;
						
			[Bindable]
			private var isExternal:Boolean = false;
			
			private var uploadFR:FileReference;
			private var uploadSampleSheetURL:String;
			private var docTypes:FileFilter;
			private var hasColumnNames:Boolean; 
			private var	sampleSheetXML:XML;
			
			override public function getSamplesGrid():AdvancedDataGrid {
				return this.samplesGrid;
			}
			
			override public function getCCNumberBox():HBox {
				return this.ccNumberContainer;
			}

			override public function getShowCCNumberCheckbox():CheckBox {
				return this.showCCNumberCheckbox;
			}

			override public function getButtonsContainer():HBox {
				return this.buttonsContainer;
			}
			
			override public function getAddOrganismContainer():HBox {
				return this.addOrganismContainer;
			}
			
			override protected function getAddAllAnnotations():Boolean {
				return false;
			}
									
			private function deleteTheSample():void {
				var idx:int = samplesGrid.selectedIndex;
				deleteSample();
				checkSamplesCompleteness();
				samplesGrid.selectedIndex = idx;
			}
			
			override protected function onPromptToClearAllSamples(event:CloseEvent):void {
				if (event.detail==Alert.YES) {
					parentDocument.samples.removeAll();
					if ( !parentDocument.isEditState() ){
						this.initializeSamplesGrid();
					} else {
						this.samplesGrid.addRow();
					}
					
					checkSamplesCompleteness();
					this.initializeBarcoding();
				}
			}	
			
			override public function initializeSamplesGrid():void {
				if (parentDocument.requestToClone != null) {
					return;
				}
				
				var numberOfSamples:Number = 0;
				var numberOfSamplesToAdd:Number = 0;
				
				if (parentApplication.submitInternalExperiment()) {
					
					if (parentDocument.isEditState()) {
						numberOfSamples = parentDocument.samples.length > 0 ? new Number(parentDocument.samples.length) : 1;
					} else {
						if (!parentDocument.sampleSetupView.checkSampleSetupCompleteness()) {
							return;
						}
						
						numberOfSamples = new Number(parentDocument.sampleSetupView.numberOfSamples.text);
					}
					
				} else {
					numberOfSamples = 1;
				}
				
				if (parentDocument.samples.length <= numberOfSamples) {
					numberOfSamplesToAdd = numberOfSamples - parentDocument.samples.length;
					for(var x:int = 0; x < numberOfSamplesToAdd; x++) {
						addSample();
					}
				} else {
					while (parentDocument.samples.length > numberOfSamples) {
						parentDocument.samples.removeItemAt(parentDocument.samples.length - 1);
					}
				}
			}
			
			override public function addSample():Boolean {
				var emptyNode:XML = null;
				var isValid:Boolean = true;
				
				emptyNode = this.getEmptySampleNode(parentDocument.samples.length);
				
				if (emptyNode != null) {
					parentDocument.samples.addItem(emptyNode);
				}
				
				return isValid;
			}
			
			
			private function getEmptySampleNode(idx:int):XML {
				var sampleId:String = "Sample" + idx;
				var idOrganism:String	= parentApplication.submitInternalExperiment() && !parentDocument.isEditState()  ? 
					parentDocument.sampleSetupView.sampleOrganismCombo.selectedItem.@value :
					(parentDocument.request.@idOrganismSampleDefault != null ? parentDocument.request.@idOrganismSampleDefault : '');		
				var idSampleType:String	= parentApplication.submitInternalExperiment() && parentDocument.sampleSetupView.sampleTypeRadioGroup.selectedValue != null ? 
										  parentDocument.sampleSetupView.sampleTypeRadioGroup.selectedValue : '';
				
				var emptyNode:XML = new XML("<Sample " +
					" idSample='" + sampleId + "'" +
					" name='' description='' " +
					" concentration=''" +
					" canChangeSampleName='Y'" +
					" canChangeSampleType='Y'" +
					" canChangeSampleConcentration='Y'" +
					" idOrganism='"  + idOrganism + "'" +	
					" idSampleType='"  + idSampleType + "'" +
					"/>");
				return emptyNode;
			}
			
			override public function checkSamplesCompleteness():void {
				parentDocument.userWarningsSamples = "";
				
				var completeCount:int = 0;
				var nameCompleteCount:int = 0;
				for each(var sample:Object in parentDocument.samples) {
					if (isEntered(sample, "@name")) {
						nameCompleteCount++;
					}
					completeCount++;
				}
				
				var isComplete:Boolean = false;
				if (parentDocument.samples.length > 0 && completeCount == parentDocument.samples.length) {
					
						if (nameCompleteCount >= new Number(parentDocument.sampleSetupView.numberOfSamples.text)) {
							isComplete = true;
						} else {
							isComplete = false;
						}
					
				} else if (parentDocument.isEditState()) {
					isComplete = true;
					
				}
				
				// Make sure that sample concentration is valid
				var cw:String = SampleConcentrationValidator.instance.validateSampleConcentration(parentDocument.samples);
				if (cw != "") {
					parentDocument.userWarningsSamples += cw;
					isComplete = false;
				}
				
				// Make sure that sample QC is valid
				var qcWarning:String = SampleQCValidator.instance.validateSampleQC(parentDocument.samples);
				if (qcWarning != "") {
					parentDocument.userWarningsSamples += qcWarning;
					isComplete = false;
				}

				if (parentDocument.theTab.contains(parentDocument.visibilityView)) {
					parentDocument.visibilityView.enabled = isComplete;
				} else if (parentDocument.theTab.contains(parentDocument.confirmView)) {
					parentDocument.confirmView.enabled = isComplete;
				}
								
				parentDocument.enableNextButtons();
				callLater(postSamplesCompleteness, [isComplete]);
			
			}
			
			private function postSamplesCompleteness(isComplete:Boolean):void {
				
				if (!isComplete) {
					
					if (parentDocument.theTab.contains(parentDocument.visibilityView)) {
						parentDocument.visibilityView.enabled = false;					
					}
					if (parentDocument.theTab.contains(parentDocument.confirmView)) {
						parentDocument.confirmView.enabled = false;					
					}
				} 
			
			}
			
			
			override public function initializeBarcoding():void {
				setSamplesGridDataProvider();
								
				// handle the download sample sheet events
				this.samplesGrid.validateNow();
				callLater(this.checkSamplesCompleteness);
			
			}

			private function setSamplesGridDataProvider():void {
				this.samplesGrid.validateNow(); // Make sure columns on samples grid are created
				
				this.samplesGrid.dataProvider = parentDocument.samples;
								
			}
			
			
			override public function showHideColumns():void {
				isExternal = (parentDocument.isEditState() && parentDocument.request.@isExternal == 'Y') || (!parentDocument.isEditState() && !parentApplication.isInternalExperimentSubmission);
				isEditState = parentDocument.isEditState();
				
				showHideCCNumberBox();
				setButtonVisibility(true);
				samplesGrid.rowOperationsAllowed = true;
				samplesGrid.insertRowEnabled = false;
				
				// Don't allow sample editing on edit unless user is admin or experiment is external or experiment is non-submitted dna sq experiment.
				if (isEditState && !parentApplication.isAdminState && !isExternal ) {
					setButtonVisibility(false);
					samplesGrid.rowOperationsAllowed = false;
				}
				
				setAddOrganismVisibility(false);
				
				// Edit columns shown
				sampleNumberCol.visible = parentDocument.isEditState();
				
				if ( parentDocument.isEditState() ){
					qualRINCol.visible = true;
				} else if ( parentDocument.sampleSetupView.sampleTypeRadioGroup.selectedValue != null ) {
					var st:Object = parentApplication.dictionaryManager.getEntry('hci.gnomex.model.SampleType', parentDocument.sampleSetupView.sampleTypeRadioGroup.selectedValue);
					qualRINCol.visible = st != null ? st.@codeNucleotideType == "RNA" : false;
				}
				
				
				if (!parentDocument.isEditState()) {
					if (parentDocument.theTab.contains(parentDocument.confirmView)) {
						parentDocument.confirmView.showHideColumns();									
					}
				}
				
				
			}
			
			override protected function rebuildSamplesGrid():void {
			}

			public function textChange(item:String):void {
				var txt:String = item;
				if(txt.length == 30) {
					Alert.show("Maximum allowed limit is 30 characters");					
				}
			}
			
			public function changeConcentrationUnit(selectedUnit:String):void{
				for each(var s:XML in samplesGrid.dataProvider) {
					s.@codeConcentrationUnit = selectedUnit;
					
				}
			}

		]]>
	</mx:Script>	
	
	<mx:VBox width="100%" height="100%" verticalGap="2" paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4">
		
		<mx:HBox width="100%" horizontalGap="0" verticalAlign="middle">
			<mx:HBox verticalAlign="middle" 
					 horizontalGap="0"
					 visible="{parentApplication.isInternalExperimentSubmission &amp;&amp; samplesTabHelp.visible}" 
					 includeInLayout="{parentApplication.isInternalExperimentSubmission &amp;&amp; samplesTabHelp.visible}"  
					 id="instructionVBox">
				<util:ContextHelp context1="samplesTabHelp" 
								  context2="{isExternal? 'External' : parentDocument.coreFacility.@idCoreFacility}" 
								  context3="{(parentDocument.requestType == 'MISEQ') ? 'HISEQ' : parentDocument.requestType}"
								  showEdit="{parentApplication.isAdminState}" 
								  title="Samples Tab Instructions" label="Instructions" id="samplesTabHelp" hideLabelIfNoHelp="true"/>
				
				<mx:Spacer width="6"/>
				<mx:VRule height="20"  />
				<mx:Spacer width="6"/>
			</mx:HBox>
			
			<mx:HBox id="buttonsContainer" horizontalGap="0" verticalAlign="middle">
				<util:ContextHelp context1="addSampleHelp" context2="" context3="" 
								  showEdit="{parentApplication.isSuperAdmin}" 
								  title="Add Samples Help" label="Adding samples" id="addSampleHelp" />
				<util:ContextHelp context1="samplesGridHelp" context2="" context3=""
								  showEdit="{parentApplication.isSuperAdmin}" 
								  title="Sample Grid Help" label="Copy and paste help" id="copyPasteHelp" />
				
				<mx:Spacer width="6"/>
				<mx:VRule height="20"/>
				<mx:Spacer width="6"/>
				
				<mx:LinkButton textDecoration="underline"  horizontalGap="0" paddingLeft="0" paddingRight="0"
							   label="Upload sample sheet" 
							   click="uploadSampleSheet();" icon="@Embed(source='../../assets/upload.png')" 
							   id="uploadSampleSheetButton" toolTip="Upload sample sheet&#13;(tab delimited txt file)" />
				<mx:LinkButton textDecoration="underline" horizontalGap="0" id="uploadHintLink"  paddingRight="0" paddingLeft="0"
							   icon="@Embed(source='../../assets/information.png')" 
							   label=""  
							   click="PopUpManager.centerPopUp(PopUpManager.createPopUp(parentApplication.theBody, UploadSampleSheetInstructionsView, true));"
							   toolTip=" 1.  Download the sample sheet (see instructions) or create your own table&#13;       in a program like Excel.&#13; 2.  Fill in the table for all the samples.&#13; 3.  Save the file as a tab-delimited txt file.&#13; 4.  Click 'Upload sample sheet' and select the file you created."/>
			</mx:HBox>
			
			<mx:LinkButton textDecoration="underline"  horizontalGap="0"  paddingRight="0"
						   id="downloadButton" label="Download sample sheet" 
						   click="{downloadSampleSheet()}"   icon="@Embed(source='../../assets/download.png')"/>
			
			
			<mx:HBox id="ccNumberContainer" horizontalGap="0" verticalAlign="middle">
				<mx:Spacer width="6"/>
				<mx:VRule height="20"/>
				<mx:Spacer width="6"/>
				<mx:CheckBox id="showCCNumberCheckbox"
							 selected="false"
							 click="toggleShowCCNumber()"  
							 visible="{parentApplication.isInternalExperimentSubmission &amp;&amp; parentApplication.isBSTLinkageSupported}"
							 includeInLayout="{parentApplication.isInternalExperimentSubmission &amp;&amp; parentApplication.isBSTLinkageSupported}" 
							 toolTip="Link samples to itBioPath using CC Number"
							 label="Enter CC Numbers" 
							 fontSize="11"/>
				<util:ContextHelp context1="ccNumberCheckBoxHelp" context2="{parentDocument.coreFacility.@idCoreFacility}" showEdit="{parentApplication.isAdminState}" title="CC Number Help"
								  label="" labelPlacement="left" id="ccNumberCheckBoxHelp" hideLabelIfNoHelp="true"/>
				
			</mx:HBox>
			
			<mx:HBox id="addOrganismContainer" horizontalGap="0" verticalAlign="middle">
				<mx:Spacer width="6" />
				<mx:VRule height="20"/>
				<mx:Spacer width="6" />
				<mx:LinkButton  horizontalGap="0" label="Add Organism ..." textDecoration="underline"  
								click="addOrganism()" id="addOrganismButton"/>
				<util:ContextHelp context1="samplesTabNewOrganismHelp" 
								  context2="{parentDocument.coreFacility.@idCoreFacility}" 
								  showEdit="{parentApplication.isAdminState}" title="New Organism Help"
								  label="" labelPlacement="left" id="samplesTabNewOrganismHelp"/>
			</mx:HBox>
		</mx:HBox>
		
		<grid:CopyPasteSampleGrid width="100%" height="100%" id="samplesGrid"  
								  editable="true" itemEditEnd="validateData(event)"
								  itemFocusOut="checkSamplesCompleteness()" 
								  addRowFunction="{addSample}"
								  deleteRowFunction="{deleteTheSample}"
								  clearAllFunction="promptToClearAllSamples"
								  showRowNumberCol="true">
			<grid:columns>
				<mx:AdvancedDataGridColumn id="sampleNumberCol" headerText="ID" width="80" visible="true"  dataField="@number"  editable="false">
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalScrollPolicy="off"  verticalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle"> 
								<util:ContextHelp context1="sampleNumber" context2="{outerDocument.parentDocument.coreFacility.@idCoreFacility}" title="Sample ID Help" 
												  showEdit="{parentApplication.isAdminState}" label="ID" noIconSpaceIfNoHelp="true"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn>       
				<mx:AdvancedDataGridColumn headerText="Sample Name" width="215" editorDataField="text" dataField="@name" rendererIsEditor="false"
										   id="sampleNameCol"
										   editable="true" showDataTips="true" dataTipField="Please enter maximum of 30 Characters"
										   itemRenderer="{hci.flex.controls.Label.create('@name')}" >
					<mx:itemEditor>
						<mx:Component id ="sampleNameTextField">
							<mx:TextInput  maxChars="30" change="outerDocument.textChange(this.text)"/>
						</mx:Component>
					</mx:itemEditor> 
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalScrollPolicy="off"  verticalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle"> 
								<util:ContextHelp context1="sampleName" context2="{outerDocument.parentDocument.coreFacility.@idCoreFacility}" title="Sample Name Help" 
												  showEdit="{parentApplication.isAdminState}" label="Sample&#13;Name" noIconSpaceIfNoHelp="true"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn>
				<mx:AdvancedDataGridColumn headerText="{parentApplication.getProperty(parentApplication.PROPERTY_CUSTOM_SAMPLE_CONC_UNITS) == 'N' ? 'Conc. (ng/ul)' : 'Conc.'}" id="concentrationCol" visible="{parentApplication.isInternalExperimentSubmission}"  width="77" formatter="{sampleConcentrationFormatter}"
										   itemEditor="{views.renderers.GridColumnFillButton.create(new views.renderers.TextInputSampleConcentration(), '')}" editorDataField="value" dataField="@concentration">
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalScrollPolicy="off"  verticalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle"> 
								<util:ContextHelp context1="sampleConcentration" context2="{outerDocument.parentDocument.coreFacility.@idCoreFacility}" title="Concentration Help" 
												  showEdit="{parentApplication.isAdminState}" label="{outerDocument.parentApplication.getProperty(outerDocument.parentApplication.PROPERTY_CUSTOM_SAMPLE_CONC_UNITS) == 'N' ? 'Conc. (ng/ul)' : 'Conc.'}" noIconSpaceIfNoHelp="true"/>
								<mx:ComboBox id="concentrationCombo" visible="{outerDocument.parentApplication.getProperty(outerDocument.parentApplication.PROPERTY_CUSTOM_SAMPLE_CONC_UNITS) == 'Y'}" 
											 includeInLayout="{outerDocument.parentApplication.getProperty(outerDocument.parentApplication.PROPERTY_CUSTOM_SAMPLE_CONC_UNITS) == 'Y'}" dataProvider="{outerDocument.parentApplication.dictionaryManager.getEntriesExcludeBlank('hci.gnomex.model.ConcentrationUnit')}" 
											 labelField="@display" change="{outerDocument.changeConcentrationUnit(concentrationCombo.selectedLabel)}"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn>
				<util:AdvancedDataGridColumnWithType propertyType="OPTION" id="sampleTypeCol"  headerText="Sample Type" visible="true" width="180"   dataField="@idSampleType" 
													 editorDataField="value" sortable="false" editable="true" rendererIsEditor="false" 
													 itemRenderer="{views.renderers.DropdownLabel.create(parentApplication.dictionaryManager.xml.Dictionary.(@className=='hci.gnomex.model.SampleType').DictionaryEntry, '@display', '@value', '@idSampleType', '', true, true)}"                 
													 itemEditor="{views.renderers.GridColumnFillButton.create(hci.flex.controls.ComboBox.getFactory(this.filteredSampleTypeList.source, '@display', '@value', '@idSampleType', true).newInstance(), '')}">
					<util:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalAlign="center" verticalAlign="middle"> 
								<util:ContextHelp context1="sampleType" context2="{outerDocument.parentDocument.coreFacility.@idCoreFacility}" title="Sample type Help" showEdit="{parentApplication.isAdminState}"
												  label="Sample Type" noIconSpaceIfNoHelp="true"/>
							</mx:VBox> 
						</mx:Component>
					</util:headerRenderer>
				</util:AdvancedDataGridColumnWithType>	
				<mx:AdvancedDataGridColumn id="otherSamplePrepMethodCol" headerText="Nucl. acid extraction meth." 
										   width="140" dataField="@otherSamplePrepMethod" 
										   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" editorDataField="value">
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" verticalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle"> 
								<util:ContextHelp context1="sampleNuclAcidExtraction" context2="{outerDocument.parentDocument.coreFacility.@idCoreFacility}" title="Nucl. Acid Extraction Help" showEdit="{parentApplication.isAdminState}"
												  label="Nucl. acid                     &#13;extraction meth." noIconSpaceIfNoHelp="true"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn>
				
				
				<mx:AdvancedDataGridColumn visible="{!isExternal &amp;&amp; isEditState}" 
										   editable="{parentApplication.isAdminState}" 
										   headerText="QC Conc. ng/uL" 
										   width="80" 
										   dataField="@qualCalcConcentration" 
										   id="qualCalcConcCol" 
										   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" 
										   editorDataField="value">
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" verticalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle"> 
								<util:ContextHelp context1="sampleQCConc" context2="{outerDocument.parentDocument.coreFacility.@idCoreFacility}" title="QC Conc. Help" showEdit="{parentApplication.isAdminState}"
												  label="QC Conc.&#13;(ng/uL)" noIconSpaceIfNoHelp="true"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn>
				
				<mx:AdvancedDataGridColumn visible="{!isExternal &amp;&amp; isEditState}"
										   editable="{parentApplication.isAdminState}"
										   headerText="QC 260/230" 
										   width="80" 
										   dataField="@qual260nmTo230nmRatio" 
										   id="qual260_230Col" 
										   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" 
										   editorDataField="value">
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" verticalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle"> 
								<util:ContextHelp context1="sampleQual260nmTo230nmRation" context2="{outerDocument.parentDocument.coreFacility.@idCoreFacility}" title="QC 260/230 Help" showEdit="{parentApplication.isAdminState}"
												  label="QC 260/230" noIconSpaceIfNoHelp="true"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn>
				
				<mx:AdvancedDataGridColumn visible="{!isExternal &amp;&amp; isEditState}" 
										   headerText="QC RIN"
										   editable="{parentApplication.isAdminState}"
										   width="70" 
										   dataField="@qualRINNumber" 
										   id="qualRINCol" 
										   itemEditor="{views.renderers.GridColumnFillButton.create(new mx.controls.TextInput(), '')}" 
										   editorDataField="value">
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0"   horizontalScrollPolicy="off" verticalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle"> 
								<util:ContextHelp context1="sampleQualRINCol" context2="{outerDocument.parentDocument.coreFacility.@idCoreFacility}" title="QC RIN Help" showEdit="{parentApplication.isAdminState}"
												  label="QC RIN" noIconSpaceIfNoHelp="true"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn>
								
				<mx:AdvancedDataGridColumn id="ccNumber" headerText="CC Number" dataField="@ccNumber" editable="true" 
										   visible="{showCCNumberCheckbox.visible &amp;&amp; showCCNumberCheckbox.selected ? true : false}"
										   width="76"
										   itemRenderer="{hci.flex.controls.Label.createCustom('@ccNumber', parentApplication.annotationColor, parentApplication.annotationColorBorder, 0)}"                
										   itemEditor="{views.renderers.GridColumnFillButton.create(hci.flex.controls.TextInput.create('@ccNumber').newInstance(), '')}" editorDataField="value">
					<mx:headerRenderer > 
						<mx:Component>
							<mx:VBox verticalGap="0" horizontalGap="0" horizontalScrollPolicy="off"  verticalScrollPolicy="off"  horizontalAlign="center" verticalAlign="middle"> 
								<util:ContextHelp context1="sampleCCNumber" context2="{outerDocument.parentDocument.coreFacility.@idCoreFacility}" title="CC Number Help" 
												  showEdit="{parentApplication.isAdminState}" label="CC           &#13;Number" noIconSpaceIfNoHelp="true"/>
							</mx:VBox> 
						</mx:Component>
					</mx:headerRenderer>
				</mx:AdvancedDataGridColumn>
								
			</grid:columns>
		</grid:CopyPasteSampleGrid>

	</mx:VBox>
	

</exp:TabSamplesBase>
